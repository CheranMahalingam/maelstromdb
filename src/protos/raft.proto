syntax = "proto3";

package protocol.raft;

import "log.proto";

enum OpCode {
  REQUEST_VOTE = 0;
  APPEND_ENTRIES = 1;
  GET_CONFIGURATION = 2;
  SET_CONFIGURATION = 3;
}

message RequestVote {
  message Request {
    int64 term = 1;
    string candidateId = 2;
    int64 lastLogIndex = 3;
    int64 lastLogTerm = 4;
  }

  message Response {
    int64 term = 1;
    bool voteGranted = 2;
  }
}

message AppendEntries {
  message Request {
    int64 term = 1;
    string leaderId = 2;
    int64 prevLogIndex = 3;
    int64 prevLogTerm = 4;
    repeated log.LogEntry entries = 5;
    int64 leaderCommit = 6;
  }

  message Response {
    int64 term = 1;
    bool success = 2;
  }
}

message GetConfiguration {
  message Request {
  }

  message Response {
    int64 id = 1;
    repeated log.Server servers = 2;
  }
}

message SetConfiguration {
  message Request {
    int64 oldId = 1;
    repeated log.Server new_servers = 2;
  }

  message Response {
    bool status = 1;
  }
}

service RaftService {
  rpc RequestVote (RequestVote.Request) returns (RequestVote.Response) {}
  rpc AppendEntries (AppendEntries.Request) returns (AppendEntries.Response) {}
  rpc GetConfiguration (GetConfiguration.Request) returns (GetConfiguration.Response) {}
  rpc SetConfiguration (SetConfiguration.Request) returns (SetConfiguration.Response) {}
}

